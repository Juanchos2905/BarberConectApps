// <auto-generated />
using System;
using BarberConect.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarberConect.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BarberConect.DAL.Entities.AppointmentReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TotalMinutes")
                        .HasColumnType("int");

                    b.Property<double>("TotalRate")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Date", "Time", "AppointmentStatus")
                        .IsUnique();

                    b.ToTable("AppointmentReservations");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarberService")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentReservationId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.Barber", b =>
                {
                    b.HasBaseType("BarberConect.DAL.Entities.User");

                    b.Property<string>("Habilidades")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Barber");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.Customer", b =>
                {
                    b.HasBaseType("BarberConect.DAL.Entities.User");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.AppointmentReservation", b =>
                {
                    b.HasOne("BarberConect.DAL.Entities.User", "User")
                        .WithMany("appointmentReservations")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.Service", b =>
                {
                    b.HasOne("BarberConect.DAL.Entities.AppointmentReservation", "AppointmentReservation")
                        .WithMany("Services")
                        .HasForeignKey("AppointmentReservationId");

                    b.Navigation("AppointmentReservation");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.AppointmentReservation", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BarberConect.DAL.Entities.User", b =>
                {
                    b.Navigation("appointmentReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
